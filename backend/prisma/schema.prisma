// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  profilePhoto String?
  birthday     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  createdWorkouts Workout[] @relation("WorkoutCreator") // Workouts they created (admin)
  workoutPlans     WorkoutPlan[] // Their personal workout plans
  workoutLogs      WorkoutLog[] // Their personal workout logs

  @@map("users")
}

model Workout {
  id          String   @id @default(cuid())
  title       String
  category    String   // Predefined categories: "Upper Body - Pull", "Upper Body - Push", "Legs", "Core", "Climbing - Power", "Climbing - Endurance", "Climbing - Warm Up", "Cardio"
  description String?
  workoutType String   // "strength" or "cardio"
  sets        Int?     // Only for strength workouts
  reps        Int?     // Only for strength workouts
  duration    Int?     // Only for cardio workouts (in minutes)
  intensity   String   // e.g., "weight", "RPE", "bodyweight", "pace", "heart rate"
  imageUrl    String?
  isGlobal    Boolean  @default(true) // Global workout library - shared across all users
  createdBy   String?  // Optional: who created this workout (for admin purposes)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User?        @relation("WorkoutCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  planItems   PlanItem[]
  workoutLogs WorkoutLog[]

  @@map("workouts")
}

model WorkoutPlan {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  planItems PlanItem[]

  @@map("workout_plans")
}

model PlanItem {
  id           String   @id @default(cuid())
  workoutId    String
  workoutPlanId String
  frequency    String   // e.g., "Mon,Wed,Fri" or "daily"
  intensity   String?  // override intensity for this plan item
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workout     Workout     @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutPlan WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  @@map("plan_items")
}

model WorkoutLog {
  id        String   @id @default(cuid())
  workoutId String
  userId    String
  date      DateTime
  sets      Int?     // Only for strength workouts
  reps      Int?     // Only for strength workouts
  duration  Int?     // Only for cardio workouts (in minutes)
  weight    Float?   // For strength workouts
  rpe       Int?     // Rate of Perceived Exertion (1-10)
  pace      String?  // For cardio workouts (e.g., "8:30/mile")
  heartRate Int?     // For cardio workouts (BPM)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workout_logs")
}
